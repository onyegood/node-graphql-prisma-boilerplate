# import UserOrderByInput, PermissionOrderByInput, RoleOrderByInput, from './generated/prisma.graphql'

type Query {
  users(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: UserOrderByInput
  ): [User!]!
  user(id: ID!): User!
  me: User!
  roles(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: RoleOrderByInput
  ): [Role!]!
  role(id: ID!): Role!
  permissions(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: PermissionOrderByInput
  ): [Permission!]!
  permission(id: ID!): Permission!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  login(data: LoginUserInput!): AuthPayload!
  deleteUser(id: ID!): User!
  updateUser(id: ID!, data: UpdateUserInput!): User!
  forgotPassword(data: ForgotPasswordInput!): User!
  resetPassword(data: ResetPasswordInput!): User!
  validateOTP(data: ValidateOTPInput!): User!
  createRole(data: CreateRoleInput!): Role!
  updateRole(id: ID!, data: UpdateRoleInput!): Role!
  deleteRole(id: ID!): Role!
  createPermission(data: CreatePermissionInput!): Permission!
  updatePermission(id: ID!, data: UpdatePermissionInput!): Permission!
  deletePermission(id: ID!): Permission!
  updateManyUsers(id: [ID!]!, data: UpdateUserInput!): User!
  updateManyRoles(id: [ID!]!, data: UpdateRoleInput!): Role!
  updateManyPermissions(id: [ID!]!, data: UpdatePermissionInput!): Permission!
  deleteManyUsers(id: [ID!]!): User!
  deleteManyRoles(id: [ID!]!): Role!
  deleteManyPermissions(id: [ID!]!): Permission!
}

# type Subscription {

# }

type AuthPayload {
  token: String!
  user: User!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  password: String!
  role: ID!
  platform: String
  network: String
  os: String
}

input LoginUserInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  firstName: String
  lastName: String
  email: String
  phone: String
  password: String
  role: ID
  resetToken: String
  resetTokenExpiration: String
  platform: String
  network: String
  os: String
}

input ForgotPasswordInput {
  email: String!
  platform: String
}

input ResetPasswordInput {
  password: String!
  passwordToken: String!
}

input ValidateOTPInput {
  passwordToken: String!
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String
  phone: String!
  password: String!
  updatedAt: String!
  createdAt: String!
  role: Role!
  resetToken: String
  resetTokenExpiration: String
  platform: String
  network: String
  os: String
  profilePicture: String
}

input CreateRoleInput {
  name: String!
  permissions: [ID!]!
}

input UpdateRoleInput {
  name: String
  permissions: [ID]
}

type Role {
  id: ID!
  name: String!
  updatedAt: String!
  createdAt: String!
  permissions: [Permission!]!
}

input CreatePermissionInput {
  name: String!
}

input UpdatePermissionInput {
  name: String
}

type Permission {
  id: ID!
  name: String!
  updatedAt: String!
  createdAt: String!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}
